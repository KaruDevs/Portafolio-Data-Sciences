# -*- coding: utf-8 -*-
"""ConsolidadoM5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BNL8HbQRuU04sCMKi3ceHyvMi9b9yPTC
"""

!pip install seaborn

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Datos
grupo_A = np.array([85, 90, 78, 88, 92, 80, 86, 89, 84, 87, 91, 82, 83, 85, 88])
grupo_B = np.array([70, 72, 75, 78, 80, 68, 74, 76, 79, 77, 73, 71, 75, 78, 80])

# 1. Dise√±o del experimento
def sugerencia_dise√±o():
    print(" Mejora del dise√±o:")
    print("- Aleatorizar la asignaci√≥n de estudiantes a los grupos.")
    print("- Asegurar que ambos grupos tengan caracter√≠sticas similares (edad, nivel previo, etc.).")
    print("- Aplicar el examen en condiciones id√©nticas para ambos grupos.")
    print("- Aumentar el tama√±o de la muestra para mayor poder estad√≠stico.\n")

# 2. Estad√≠sticas descriptivas
def estadisticas_descriptivas():
    print(" Estad√≠sticas Descriptivas:")
    for grupo, nombre in zip([grupo_A, grupo_B], ["Grupo A (Tutor√≠a)", "Grupo B (Control)"]):
        media = np.mean(grupo)
        std = np.std(grupo, ddof=1)
        print(f"{nombre}: Media = {media:.2f}, Desviaci√≥n est√°ndar = {std:.2f}")
    print()

    # Visualizaci√≥n
    plt.figure(figsize=(12, 5))

    plt.subplot(1, 2, 1)
    sns.histplot(grupo_A, kde=True, color='skyblue', label='Grupo A')
    sns.histplot(grupo_B, kde=True, color='salmon', label='Grupo B')
    plt.title("Histogramas de calificaciones")
    plt.legend()

    plt.subplot(1, 2, 2)
    sns.boxplot(data=[grupo_A, grupo_B], palette=['skyblue', 'salmon'])
    plt.xticks([0, 1], ['Grupo A', 'Grupo B'])
    plt.title("Diagramas de caja")
    plt.tight_layout()
    plt.show()

# 3. Prueba de hip√≥tesis
def prueba_hipotesis():
    print(" Prueba de Hip√≥tesis:")
    print("H0: No hay diferencia en el rendimiento acad√©mico entre los dos grupos.")
    print("H1: El grupo con tutor√≠a tiene mejor rendimiento acad√©mico.\n")

    t_stat, p_value = stats.ttest_ind(grupo_A, grupo_B, equal_var=False)
    print(f"Estad√≠stico t = {t_stat:.4f}")
    print(f"Valor-p = {p_value:.4f}")

    if p_value < 0.05:
        print(" Se rechaza H0: hay evidencia de que la tutor√≠a mejora el rendimiento.\n")
    else:
        print(" No se rechaza H0: no hay evidencia suficiente de mejora.\n")

# 4. Intervalo de confianza
def intervalo_confianza():
    print("üìê Intervalo de Confianza del 95% para la diferencia de medias:")
    diff_mean = np.mean(grupo_A) - np.mean(grupo_B)
    se_diff = np.sqrt(np.var(grupo_A, ddof=1)/len(grupo_A) + np.var(grupo_B, ddof=1)/len(grupo_B))
    df = len(grupo_A) + len(grupo_B) - 2
    t_crit = stats.t.ppf(0.975, df)
    margin = t_crit * se_diff
    ci_lower = diff_mean - margin
    ci_upper = diff_mean + margin
    print(f"Diferencia de medias: {diff_mean:.2f}")
    print(f"Intervalo: ({ci_lower:.2f}, {ci_upper:.2f})")

    if ci_lower > 0:
        print(" El intervalo sugiere que el grupo A tiene mejor rendimiento.\n")
    else:
        print(" El intervalo incluye 0, no hay diferencia significativa.\n")

# Ejecutar todo
if __name__ == "__main__":
    sugerencia_dise√±o()
    estadisticas_descriptivas()
    prueba_hipotesis()
    intervalo_confianza()